/*


ofs_program -> statement*

statement -> "const"  ident ("=" expr)? ";"?
expr -> ident | integer

ident -> [a-zA-Z_$][a-zA-Z_$0-9]* 
integer -> ([+-])?[0-9]+

null -~ semicolon
undefined -~ undefined

*/
%%%%%%%%%%%%%%%%%%%%%%%%% PROGRAM AST %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ofs_program(OFSCodes, AstOFSPure) :-
    ofs_parser(AstOFSImpure, OFSCodes, []),
	purify(AstOFSImpure, AstOFSPure)
.

purify(AstOFSImpure, AstOFSPure) :-
   eliminate_null(AstOFSImpure, AstOFSPure)
.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%% GENERATOR %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
formated_time(FormattedTimeStamp) :- 
    get_time(TimeStamp),
    format_time(atom(FormattedTimeStamp), '%Y-%m-%d %T', TimeStamp).

options(splash, Splash) :- 
    formated_time(FormattedTimeStamp),
    format(atom(Splash), 'Generated by OFS compiler v 0.0 ~s', [FormattedTimeStamp]).

generator(StatementList, JSCodeString) :-
    options(splash, Splash),
    with_output_to(string(Str), (
        generate_line_comment(comment(Splash)),
        forall(member(Statement, StatementList), generate_statement(Statement))
    )),
    string_concat(Str, "\n", JSCodeString). % Añadir un salto de línea final.

generate_statement(declaration(Type, id(I), Expr)) :- !,
    extract_atom(I, IStr),
    generate_expression(Expr, ExprStr),
    format('~s ~s = ~s;\n', [Type, IStr, ExprStr]).
generate_statement(S) :-
    format('Unrecognized statement: ~w\n', [S]).

generate_line_comment(comment(Comment)) :-
    format('// ~s\n', [Comment]).

% Función auxiliar para generar la cadena de una expresión
generate_expression(id(id(X)), XStr) :- !, extract_atom(X, XStr).
generate_expression(add(Left, Right), ExprStr) :- 
    generate_expression(Left, LeftStr),
    generate_expression(Right, RightStr),
    format(atom(ExprStr), '~s + ~s', [LeftStr, RightStr]).
% ... agregar casos para otras operaciones aritméticas ...

% Función auxiliar para extraer el átomo de un término id(X)
extract_atom(id(Atom), AtomString) :- 
    atom_string(Atom, AtomString).
extract_atom(Atom, AtomString) :- 
    atom_string(Atom, AtomString).

%%%%%%%%%%%%%%%%%%%%%%%%%%%% PARSER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
ofs_parser([]) --> [].
ofs_parser([S | RS]) --> (statement(S) ; comment), ofs_parser(RS).


statement(declaration(Type, Ident, RS)) --> declaration_type(Type), ident(Ident), right_side(RS).
statement(null) --> semicolon.

comment --> "//", rest_of_line.
rest_of_line --> "\n", !.
rest_of_line --> [_], rest_of_line.

declaration_type(const) --> const.
declaration_type(let) --> let.
declaration_type(var) --> var.


right_side(E) --> assignment, expr(E).
right_side(undefined) --> [].

% Expresiones: Sumas y restas
expr(Expr) --> monomio(M), expr_tail(M, Expr).
expr_tail(Acc, Expr) --> add_op(Op), monomio(M), { NewAcc =.. [Op, Acc, M] }, expr_tail(NewAcc, Expr).
expr_tail(Acc, Acc) --> [].

% Monomio: Por ahora, trataremos el monomio simplemente como un factor
% Esta regla se expandirá más adelante para incluir multiplicación y división
monomio(Factor) --> factor(Factor).

% Factores: Identificadores, números o expresiones entre paréntesis
factor(id(Id)) --> ident(Id).
factor(num(N)) --> integer(N).
factor(Expr) --> "(", expr(Expr), ")".

% Operadores de suma y resta
add_op(add) --> "+".
add_op(sub) --> "-".

%%%%%%%%%%%%%%%%%%%%%%%%%%%% UTILS %%%%%%%%%%%%%%%%%%%%%%%
/*
Example:
?- eliminate_null( [const(x, int(666)), null, const(x, undefined), null], Ast).
Ast = [const(x, int(666)), const(x, undefined)]
*/
eliminate_null([], []).
eliminate_null([null | R], RWN) :- !, eliminate_null(R, RWN).
eliminate_null([S | R], [S | RWN] ) :- !, eliminate_null(R, RWN).

%%%%%%%%%%%%%%%%%%%%%%%%%%% TOKENIZER = LEXER %%%%%%%%%%%%%%%%%%%%%

ident( id(Id) ) --> [X], { member(X, [36,95]);  char_type(X, alpha) }, ident_tail(Tail), { atom_codes(Id, [X|Tail]) }.

ident_tail([]) --> [].
ident_tail([X|Tail]) --> [X], { member(X, [36,95]); char_type(X, alnum) }, ident_tail(Tail).

integer( int(666) ) --> "666".

const --> spaces, "const", space, spaces.
let --> spaces, "let", space, spaces.
var --> spaces, "var", space, spaces.

space --> " ";"\t";"\n";"\r".

assignment --> spaces, "=", spaces.

semicolon --> spaces, ";", spaces.

spaces --> space, spaces.
spaces --> [].